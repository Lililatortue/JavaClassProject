package ui;

import business.Client;
import business.Compte;
import business.Depot;
import business.FileManager;
import business.Retrait;
import business.Virement;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;


public class MenuClient extends JFrame {
	
	private static final long serialVersionUID = 7953756532647647360L;
	
	private Client client;
	private java.util.List<Client> clients;
	
	public MenuClient(Client client, java.util.List<Client> clients) {
        this.client = client;

        setTitle("Menu Client - Fortis Bank");
        setSize(400, 400);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new BorderLayout(10, 10));

        JLabel lblBienvenue = new JLabel("Bienvenue " + client.getNom(), SwingConstants.CENTER);
        lblBienvenue.setFont(new Font("Arial", Font.BOLD, 16));
        getContentPane().add(lblBienvenue, BorderLayout.NORTH);

        JPanel panelButtons = new JPanel(new GridLayout(0, 1, 10, 10));
        getContentPane().add(panelButtons, BorderLayout.CENTER);

        // Boutons
        JButton btnSoldeTotal = new JButton("Consulter solde total");
        btnSoldeTotal.addActionListener(_ -> afficherSolde());

        JButton btnDepot = new JButton("Effectuer un dépôt");
        btnDepot.addActionListener(_ -> effectuerDepot());

        JButton btnRetrait = new JButton("Effectuer un retrait");
        btnRetrait.addActionListener(e -> effectuerRetrait());

        JButton btnVirement = new JButton("Effectuer un virement");
        btnVirement.addActionListener(e -> effectuerVirement());

        JButton btnHistorique = new JButton("Voir l'historique des transactions");
        //btnHistorique.addActionListener(e -> afficherHistorique());

        JButton btnQuitter = new JButton("Quitter");
        btnQuitter.addActionListener(e -> dispose());

        // Ajout
        panelButtons.add(btnSoldeTotal);
        panelButtons.add(btnDepot);
        panelButtons.add(btnRetrait);
        panelButtons.add(btnVirement);
        panelButtons.add(btnHistorique);
        panelButtons.add(btnQuitter);
    }
	
	
	
	// Solde Cheque
	private void afficherSolde() {
        double total = client.consulterSolde();
        JOptionPane.showMessageDialog(this, "Solde total : " + total + " $");
    }
	
	
	// Deposit
	private void effectuerDepot() {
        Compte compte = choisirCompte("Choisir un compte pour le dépôt");
        if (compte == null) return;

        String montantStr = JOptionPane.showInputDialog(this, "Montant à déposer :");
        try {
            double montant = Double.parseDouble(montantStr);
            new Depot(genererId(), montant, compte).executer();
            
            FileManager.sauvegarderClients(clients, "data/clients.dat");
            
            JOptionPane.showMessageDialog(this, "Dépôt effectué !");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Montant invalide.");
        }
    }
	
	
	// Retrait
	private void effectuerRetrait() {
        Compte compte = choisirCompte("Choisir un compte pour le retrait");
        if (compte == null) return;

        String montantStr = JOptionPane.showInputDialog(this, "Montant à retirer :");
        try {
            double montant = Double.parseDouble(montantStr);
            new Retrait(genererId(), montant, compte).executer();
            JOptionPane.showMessageDialog(this, "Retrait effectué !");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Montant invalide");
        }
    }
	
	
	// Virement compte -> compte
	private void effectuerVirement() {
	    Compte source = choisirCompte("Compte source");
	    if (source == null) return;

	    Compte destination = choisirCompte("Compte destination");
	    if (destination == null || destination == source) {
	        JOptionPane.showMessageDialog(this, "Compte destination invalide");
	        return;
	    }

	    String montantStr = JOptionPane.showInputDialog(this, "Montant à transférer :");
	    try {
	        double montant = Double.parseDouble(montantStr);

	        Virement virement = new Virement(genererId(), montant, source, destination);
	        if (virement.executer()) {
	            JOptionPane.showMessageDialog(this, "Virement effectué !");
	        } else {
	            JOptionPane.showMessageDialog(this, "Virement refusé : solde insuffisant ou montant invalide", "Erreur", JOptionPane.ERROR_MESSAGE);
	        }

	    } catch (NumberFormatException ex) {
	        JOptionPane.showMessageDialog(this, "Montant invalide", "Erreur", JOptionPane.ERROR_MESSAGE);
	    }
	}
	
	
	
	

	
	
	
	// Generate random ID
	private static int genererId() {
		return (int) (Math.random() * 100000);
	}
	
	
	
	// Compte Mapper
	private Compte choisirCompte(String titre) {
	    if (client.getComptes().isEmpty()) {
	        JOptionPane.showMessageDialog(this, "Aucun compte disponible");
	        return null;
	    }

	    Object choix = JOptionPane.showInputDialog(
	        this, titre, "Comptes",
	        JOptionPane.PLAIN_MESSAGE, null,
	        client.getComptes().stream().map(Compte::getNumero).toArray(),
	        null
	    );

	    if (choix == null) return null;

	    return client.getComptes().stream()
	            .filter(c -> c.getNumero().equals(choix.toString()))
	            .findFirst().orElse(null);
	}
	
	
	
	
	
	
}
